//
// Generated by Bluespec Compiler, version 2021.12.1 (build fd501401)
//
// On Sun Nov 24 10:37:48 IST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_loadA                      O     1 const
// RDY_loadB                      O     1 const
// RDY_loadS                      O     1 const
// getResult                      O   512 reg
// RDY_getResult                  O     1
// isReady                        O     1
// RDY_isReady                    O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// loadA_a                        I    64 reg
// loadB_b                        I    64 reg
// loadS_s                        I     1
// EN_loadA                       I     1
// EN_loadB                       I     1
// EN_loadS                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSystolicArray(CLK,
		       RST_N,

		       loadA_a,
		       EN_loadA,
		       RDY_loadA,

		       loadB_b,
		       EN_loadB,
		       RDY_loadB,

		       loadS_s,
		       EN_loadS,
		       RDY_loadS,

		       getResult,
		       RDY_getResult,

		       isReady,
		       RDY_isReady);
  input  CLK;
  input  RST_N;

  // action method loadA
  input  [63 : 0] loadA_a;
  input  EN_loadA;
  output RDY_loadA;

  // action method loadB
  input  [63 : 0] loadB_b;
  input  EN_loadB;
  output RDY_loadB;

  // action method loadS
  input  loadS_s;
  input  EN_loadS;
  output RDY_loadS;

  // value method getResult
  output [511 : 0] getResult;
  output RDY_getResult;

  // value method isReady
  output isReady;
  output RDY_isReady;

  // signals for module outputs
  wire [511 : 0] getResult;
  wire RDY_getResult, RDY_isReady, RDY_loadA, RDY_loadB, RDY_loadS, isReady;

  // register bcheck
  reg bcheck;
  wire bcheck_D_IN, bcheck_EN;

  // register bsum
  reg [15 : 0] bsum;
  wire [15 : 0] bsum_D_IN;
  wire bsum_EN;

  // register cycle
  reg [2 : 0] cycle;
  wire [2 : 0] cycle_D_IN;
  wire cycle_EN;

  // register datacollect
  reg datacollect;
  wire datacollect_D_IN, datacollect_EN;

  // register initialized
  reg initialized;
  wire initialized_D_IN, initialized_EN;

  // register tempA_0_0
  reg [15 : 0] tempA_0_0;
  wire [15 : 0] tempA_0_0_D_IN;
  wire tempA_0_0_EN;

  // register tempA_0_1
  reg [15 : 0] tempA_0_1;
  wire [15 : 0] tempA_0_1_D_IN;
  wire tempA_0_1_EN;

  // register tempA_0_2
  reg [15 : 0] tempA_0_2;
  wire [15 : 0] tempA_0_2_D_IN;
  wire tempA_0_2_EN;

  // register tempA_0_3
  reg [15 : 0] tempA_0_3;
  wire [15 : 0] tempA_0_3_D_IN;
  wire tempA_0_3_EN;

  // register tempA_1_0
  reg [15 : 0] tempA_1_0;
  wire [15 : 0] tempA_1_0_D_IN;
  wire tempA_1_0_EN;

  // register tempA_1_1
  reg [15 : 0] tempA_1_1;
  wire [15 : 0] tempA_1_1_D_IN;
  wire tempA_1_1_EN;

  // register tempA_1_2
  reg [15 : 0] tempA_1_2;
  wire [15 : 0] tempA_1_2_D_IN;
  wire tempA_1_2_EN;

  // register tempA_1_3
  reg [15 : 0] tempA_1_3;
  wire [15 : 0] tempA_1_3_D_IN;
  wire tempA_1_3_EN;

  // register tempA_2_0
  reg [15 : 0] tempA_2_0;
  wire [15 : 0] tempA_2_0_D_IN;
  wire tempA_2_0_EN;

  // register tempA_2_1
  reg [15 : 0] tempA_2_1;
  wire [15 : 0] tempA_2_1_D_IN;
  wire tempA_2_1_EN;

  // register tempA_2_2
  reg [15 : 0] tempA_2_2;
  wire [15 : 0] tempA_2_2_D_IN;
  wire tempA_2_2_EN;

  // register tempA_2_3
  reg [15 : 0] tempA_2_3;
  wire [15 : 0] tempA_2_3_D_IN;
  wire tempA_2_3_EN;

  // register tempA_3_0
  reg [15 : 0] tempA_3_0;
  wire [15 : 0] tempA_3_0_D_IN;
  wire tempA_3_0_EN;

  // register tempA_3_1
  reg [15 : 0] tempA_3_1;
  wire [15 : 0] tempA_3_1_D_IN;
  wire tempA_3_1_EN;

  // register tempA_3_2
  reg [15 : 0] tempA_3_2;
  wire [15 : 0] tempA_3_2_D_IN;
  wire tempA_3_2_EN;

  // register tempA_3_3
  reg [15 : 0] tempA_3_3;
  wire [15 : 0] tempA_3_3_D_IN;
  wire tempA_3_3_EN;

  // register tempB_0_0
  reg [15 : 0] tempB_0_0;
  wire [15 : 0] tempB_0_0_D_IN;
  wire tempB_0_0_EN;

  // register tempB_0_1
  reg [15 : 0] tempB_0_1;
  wire [15 : 0] tempB_0_1_D_IN;
  wire tempB_0_1_EN;

  // register tempB_0_2
  reg [15 : 0] tempB_0_2;
  wire [15 : 0] tempB_0_2_D_IN;
  wire tempB_0_2_EN;

  // register tempB_0_3
  reg [15 : 0] tempB_0_3;
  wire [15 : 0] tempB_0_3_D_IN;
  wire tempB_0_3_EN;

  // register tempB_1_0
  reg [15 : 0] tempB_1_0;
  wire [15 : 0] tempB_1_0_D_IN;
  wire tempB_1_0_EN;

  // register tempB_1_1
  reg [15 : 0] tempB_1_1;
  wire [15 : 0] tempB_1_1_D_IN;
  wire tempB_1_1_EN;

  // register tempB_1_2
  reg [15 : 0] tempB_1_2;
  wire [15 : 0] tempB_1_2_D_IN;
  wire tempB_1_2_EN;

  // register tempB_1_3
  reg [15 : 0] tempB_1_3;
  wire [15 : 0] tempB_1_3_D_IN;
  wire tempB_1_3_EN;

  // register tempB_2_0
  reg [15 : 0] tempB_2_0;
  wire [15 : 0] tempB_2_0_D_IN;
  wire tempB_2_0_EN;

  // register tempB_2_1
  reg [15 : 0] tempB_2_1;
  wire [15 : 0] tempB_2_1_D_IN;
  wire tempB_2_1_EN;

  // register tempB_2_2
  reg [15 : 0] tempB_2_2;
  wire [15 : 0] tempB_2_2_D_IN;
  wire tempB_2_2_EN;

  // register tempB_2_3
  reg [15 : 0] tempB_2_3;
  wire [15 : 0] tempB_2_3_D_IN;
  wire tempB_2_3_EN;

  // register tempB_3_0
  reg [15 : 0] tempB_3_0;
  wire [15 : 0] tempB_3_0_D_IN;
  wire tempB_3_0_EN;

  // register tempB_3_1
  reg [15 : 0] tempB_3_1;
  wire [15 : 0] tempB_3_1_D_IN;
  wire tempB_3_1_EN;

  // register tempB_3_2
  reg [15 : 0] tempB_3_2;
  wire [15 : 0] tempB_3_2_D_IN;
  wire tempB_3_2_EN;

  // register tempB_3_3
  reg [15 : 0] tempB_3_3;
  wire [15 : 0] tempB_3_3_D_IN;
  wire tempB_3_3_EN;

  // register tempC_0_0
  reg [31 : 0] tempC_0_0;
  wire [31 : 0] tempC_0_0_D_IN;
  wire tempC_0_0_EN;

  // register tempC_0_1
  reg [31 : 0] tempC_0_1;
  wire [31 : 0] tempC_0_1_D_IN;
  wire tempC_0_1_EN;

  // register tempC_0_2
  reg [31 : 0] tempC_0_2;
  wire [31 : 0] tempC_0_2_D_IN;
  wire tempC_0_2_EN;

  // register tempC_0_3
  reg [31 : 0] tempC_0_3;
  wire [31 : 0] tempC_0_3_D_IN;
  wire tempC_0_3_EN;

  // register tempC_1_0
  reg [31 : 0] tempC_1_0;
  wire [31 : 0] tempC_1_0_D_IN;
  wire tempC_1_0_EN;

  // register tempC_1_1
  reg [31 : 0] tempC_1_1;
  wire [31 : 0] tempC_1_1_D_IN;
  wire tempC_1_1_EN;

  // register tempC_1_2
  reg [31 : 0] tempC_1_2;
  wire [31 : 0] tempC_1_2_D_IN;
  wire tempC_1_2_EN;

  // register tempC_1_3
  reg [31 : 0] tempC_1_3;
  wire [31 : 0] tempC_1_3_D_IN;
  wire tempC_1_3_EN;

  // register tempC_2_0
  reg [31 : 0] tempC_2_0;
  wire [31 : 0] tempC_2_0_D_IN;
  wire tempC_2_0_EN;

  // register tempC_2_1
  reg [31 : 0] tempC_2_1;
  wire [31 : 0] tempC_2_1_D_IN;
  wire tempC_2_1_EN;

  // register tempC_2_2
  reg [31 : 0] tempC_2_2;
  wire [31 : 0] tempC_2_2_D_IN;
  wire tempC_2_2_EN;

  // register tempC_2_3
  reg [31 : 0] tempC_2_3;
  wire [31 : 0] tempC_2_3_D_IN;
  wire tempC_2_3_EN;

  // register tempC_3_0
  reg [31 : 0] tempC_3_0;
  wire [31 : 0] tempC_3_0_D_IN;
  wire tempC_3_0_EN;

  // register tempC_3_1
  reg [31 : 0] tempC_3_1;
  wire [31 : 0] tempC_3_1_D_IN;
  wire tempC_3_1_EN;

  // register tempC_3_2
  reg [31 : 0] tempC_3_2;
  wire [31 : 0] tempC_3_2_D_IN;
  wire tempC_3_2_EN;

  // register tempC_3_3
  reg [31 : 0] tempC_3_3;
  wire [31 : 0] tempC_3_3_D_IN;
  wire tempC_3_3_EN;

  // register tempS_0_0
  reg tempS_0_0;
  wire tempS_0_0_D_IN, tempS_0_0_EN;

  // register tempS_0_1
  reg tempS_0_1;
  wire tempS_0_1_D_IN, tempS_0_1_EN;

  // register tempS_0_2
  reg tempS_0_2;
  wire tempS_0_2_D_IN, tempS_0_2_EN;

  // register tempS_0_3
  reg tempS_0_3;
  wire tempS_0_3_D_IN, tempS_0_3_EN;

  // register tempS_1_0
  reg tempS_1_0;
  wire tempS_1_0_D_IN, tempS_1_0_EN;

  // register tempS_1_1
  reg tempS_1_1;
  wire tempS_1_1_D_IN, tempS_1_1_EN;

  // register tempS_1_2
  reg tempS_1_2;
  wire tempS_1_2_D_IN, tempS_1_2_EN;

  // register tempS_1_3
  reg tempS_1_3;
  wire tempS_1_3_D_IN, tempS_1_3_EN;

  // register tempS_2_0
  reg tempS_2_0;
  wire tempS_2_0_D_IN, tempS_2_0_EN;

  // register tempS_2_1
  reg tempS_2_1;
  wire tempS_2_1_D_IN, tempS_2_1_EN;

  // register tempS_2_2
  reg tempS_2_2;
  wire tempS_2_2_D_IN, tempS_2_2_EN;

  // register tempS_2_3
  reg tempS_2_3;
  wire tempS_2_3_D_IN, tempS_2_3_EN;

  // register tempS_3_0
  reg tempS_3_0;
  wire tempS_3_0_D_IN, tempS_3_0_EN;

  // register tempS_3_1
  reg tempS_3_1;
  wire tempS_3_1_D_IN, tempS_3_1_EN;

  // register tempS_3_2
  reg tempS_3_2;
  wire tempS_3_2_D_IN, tempS_3_2_EN;

  // register tempS_3_3
  reg tempS_3_3;
  wire tempS_3_3_D_IN, tempS_3_3_EN;

  // ports of submodule cells_0_0
  wire [31 : 0] cells_0_0_getC, cells_0_0_putC_c;
  wire [15 : 0] cells_0_0_getA,
		cells_0_0_getB,
		cells_0_0_putA_a,
		cells_0_0_putB_b;
  wire cells_0_0_EN_putA,
       cells_0_0_EN_putB,
       cells_0_0_EN_putC,
       cells_0_0_EN_putS,
       cells_0_0_RDY_getA,
       cells_0_0_RDY_getB,
       cells_0_0_RDY_getC,
       cells_0_0_RDY_getS,
       cells_0_0_getS,
       cells_0_0_putS_s;

  // ports of submodule cells_0_1
  wire [31 : 0] cells_0_1_getC, cells_0_1_putC_c;
  wire [15 : 0] cells_0_1_getA,
		cells_0_1_getB,
		cells_0_1_putA_a,
		cells_0_1_putB_b;
  wire cells_0_1_EN_putA,
       cells_0_1_EN_putB,
       cells_0_1_EN_putC,
       cells_0_1_EN_putS,
       cells_0_1_RDY_getA,
       cells_0_1_RDY_getB,
       cells_0_1_RDY_getC,
       cells_0_1_RDY_getS,
       cells_0_1_getS,
       cells_0_1_putS_s;

  // ports of submodule cells_0_2
  wire [31 : 0] cells_0_2_getC, cells_0_2_putC_c;
  wire [15 : 0] cells_0_2_getA,
		cells_0_2_getB,
		cells_0_2_putA_a,
		cells_0_2_putB_b;
  wire cells_0_2_EN_putA,
       cells_0_2_EN_putB,
       cells_0_2_EN_putC,
       cells_0_2_EN_putS,
       cells_0_2_RDY_getA,
       cells_0_2_RDY_getB,
       cells_0_2_RDY_getC,
       cells_0_2_RDY_getS,
       cells_0_2_getS,
       cells_0_2_putS_s;

  // ports of submodule cells_0_3
  wire [31 : 0] cells_0_3_getC, cells_0_3_putC_c;
  wire [15 : 0] cells_0_3_getA,
		cells_0_3_getB,
		cells_0_3_putA_a,
		cells_0_3_putB_b;
  wire cells_0_3_EN_putA,
       cells_0_3_EN_putB,
       cells_0_3_EN_putC,
       cells_0_3_EN_putS,
       cells_0_3_RDY_getA,
       cells_0_3_RDY_getB,
       cells_0_3_RDY_getC,
       cells_0_3_RDY_getS,
       cells_0_3_getS,
       cells_0_3_putS_s;

  // ports of submodule cells_1_0
  wire [31 : 0] cells_1_0_getC, cells_1_0_putC_c;
  wire [15 : 0] cells_1_0_getA,
		cells_1_0_getB,
		cells_1_0_putA_a,
		cells_1_0_putB_b;
  wire cells_1_0_EN_putA,
       cells_1_0_EN_putB,
       cells_1_0_EN_putC,
       cells_1_0_EN_putS,
       cells_1_0_RDY_getA,
       cells_1_0_RDY_getB,
       cells_1_0_RDY_getC,
       cells_1_0_RDY_getS,
       cells_1_0_getS,
       cells_1_0_putS_s;

  // ports of submodule cells_1_1
  wire [31 : 0] cells_1_1_getC, cells_1_1_putC_c;
  wire [15 : 0] cells_1_1_getA,
		cells_1_1_getB,
		cells_1_1_putA_a,
		cells_1_1_putB_b;
  wire cells_1_1_EN_putA,
       cells_1_1_EN_putB,
       cells_1_1_EN_putC,
       cells_1_1_EN_putS,
       cells_1_1_RDY_getA,
       cells_1_1_RDY_getB,
       cells_1_1_RDY_getC,
       cells_1_1_RDY_getS,
       cells_1_1_getS,
       cells_1_1_putS_s;

  // ports of submodule cells_1_2
  wire [31 : 0] cells_1_2_getC, cells_1_2_putC_c;
  wire [15 : 0] cells_1_2_getA,
		cells_1_2_getB,
		cells_1_2_putA_a,
		cells_1_2_putB_b;
  wire cells_1_2_EN_putA,
       cells_1_2_EN_putB,
       cells_1_2_EN_putC,
       cells_1_2_EN_putS,
       cells_1_2_RDY_getA,
       cells_1_2_RDY_getB,
       cells_1_2_RDY_getC,
       cells_1_2_RDY_getS,
       cells_1_2_getS,
       cells_1_2_putS_s;

  // ports of submodule cells_1_3
  wire [31 : 0] cells_1_3_getC, cells_1_3_putC_c;
  wire [15 : 0] cells_1_3_getA,
		cells_1_3_getB,
		cells_1_3_putA_a,
		cells_1_3_putB_b;
  wire cells_1_3_EN_putA,
       cells_1_3_EN_putB,
       cells_1_3_EN_putC,
       cells_1_3_EN_putS,
       cells_1_3_RDY_getA,
       cells_1_3_RDY_getB,
       cells_1_3_RDY_getC,
       cells_1_3_RDY_getS,
       cells_1_3_getS,
       cells_1_3_putS_s;

  // ports of submodule cells_2_0
  wire [31 : 0] cells_2_0_getC, cells_2_0_putC_c;
  wire [15 : 0] cells_2_0_getA,
		cells_2_0_getB,
		cells_2_0_putA_a,
		cells_2_0_putB_b;
  wire cells_2_0_EN_putA,
       cells_2_0_EN_putB,
       cells_2_0_EN_putC,
       cells_2_0_EN_putS,
       cells_2_0_RDY_getA,
       cells_2_0_RDY_getB,
       cells_2_0_RDY_getC,
       cells_2_0_RDY_getS,
       cells_2_0_getS,
       cells_2_0_putS_s;

  // ports of submodule cells_2_1
  wire [31 : 0] cells_2_1_getC, cells_2_1_putC_c;
  wire [15 : 0] cells_2_1_getA,
		cells_2_1_getB,
		cells_2_1_putA_a,
		cells_2_1_putB_b;
  wire cells_2_1_EN_putA,
       cells_2_1_EN_putB,
       cells_2_1_EN_putC,
       cells_2_1_EN_putS,
       cells_2_1_RDY_getA,
       cells_2_1_RDY_getB,
       cells_2_1_RDY_getC,
       cells_2_1_RDY_getS,
       cells_2_1_getS,
       cells_2_1_putS_s;

  // ports of submodule cells_2_2
  wire [31 : 0] cells_2_2_getC, cells_2_2_putC_c;
  wire [15 : 0] cells_2_2_getA,
		cells_2_2_getB,
		cells_2_2_putA_a,
		cells_2_2_putB_b;
  wire cells_2_2_EN_putA,
       cells_2_2_EN_putB,
       cells_2_2_EN_putC,
       cells_2_2_EN_putS,
       cells_2_2_RDY_getA,
       cells_2_2_RDY_getB,
       cells_2_2_RDY_getC,
       cells_2_2_RDY_getS,
       cells_2_2_getS,
       cells_2_2_putS_s;

  // ports of submodule cells_2_3
  wire [31 : 0] cells_2_3_getC, cells_2_3_putC_c;
  wire [15 : 0] cells_2_3_getA,
		cells_2_3_getB,
		cells_2_3_putA_a,
		cells_2_3_putB_b;
  wire cells_2_3_EN_putA,
       cells_2_3_EN_putB,
       cells_2_3_EN_putC,
       cells_2_3_EN_putS,
       cells_2_3_RDY_getA,
       cells_2_3_RDY_getB,
       cells_2_3_RDY_getC,
       cells_2_3_RDY_getS,
       cells_2_3_getS,
       cells_2_3_putS_s;

  // ports of submodule cells_3_0
  wire [31 : 0] cells_3_0_getC, cells_3_0_putC_c;
  wire [15 : 0] cells_3_0_getA,
		cells_3_0_getB,
		cells_3_0_putA_a,
		cells_3_0_putB_b;
  wire cells_3_0_EN_putA,
       cells_3_0_EN_putB,
       cells_3_0_EN_putC,
       cells_3_0_EN_putS,
       cells_3_0_RDY_getA,
       cells_3_0_RDY_getB,
       cells_3_0_RDY_getC,
       cells_3_0_RDY_getS,
       cells_3_0_getS,
       cells_3_0_putS_s;

  // ports of submodule cells_3_1
  wire [31 : 0] cells_3_1_getC, cells_3_1_putC_c;
  wire [15 : 0] cells_3_1_getA,
		cells_3_1_getB,
		cells_3_1_putA_a,
		cells_3_1_putB_b;
  wire cells_3_1_EN_putA,
       cells_3_1_EN_putB,
       cells_3_1_EN_putC,
       cells_3_1_EN_putS,
       cells_3_1_RDY_getA,
       cells_3_1_RDY_getB,
       cells_3_1_RDY_getC,
       cells_3_1_RDY_getS,
       cells_3_1_getS,
       cells_3_1_putS_s;

  // ports of submodule cells_3_2
  wire [31 : 0] cells_3_2_getC, cells_3_2_putC_c;
  wire [15 : 0] cells_3_2_getA,
		cells_3_2_getB,
		cells_3_2_putA_a,
		cells_3_2_putB_b;
  wire cells_3_2_EN_putA,
       cells_3_2_EN_putB,
       cells_3_2_EN_putC,
       cells_3_2_EN_putS,
       cells_3_2_RDY_getA,
       cells_3_2_RDY_getB,
       cells_3_2_RDY_getC,
       cells_3_2_RDY_getS,
       cells_3_2_getS,
       cells_3_2_putS_s;

  // ports of submodule cells_3_3
  wire [31 : 0] cells_3_3_getC, cells_3_3_putC_c;
  wire [15 : 0] cells_3_3_getA,
		cells_3_3_getB,
		cells_3_3_putA_a,
		cells_3_3_putB_b;
  wire cells_3_3_EN_putA,
       cells_3_3_EN_putB,
       cells_3_3_EN_putC,
       cells_3_3_EN_putS,
       cells_3_3_RDY_getA,
       cells_3_3_RDY_getB,
       cells_3_3_RDY_getC,
       cells_3_3_RDY_getS,
       cells_3_3_getS,
       cells_3_3_putS_s;

  // rule scheduling signals
  wire CAN_FIRE_RL_bcheck__dreg_update,
       CAN_FIRE_RL_datacollect__dreg_update,
       CAN_FIRE_RL_getC_data,
       CAN_FIRE_RL_putC_data,
       CAN_FIRE_loadA,
       CAN_FIRE_loadB,
       CAN_FIRE_loadS,
       WILL_FIRE_RL_bcheck__dreg_update,
       WILL_FIRE_RL_datacollect__dreg_update,
       WILL_FIRE_RL_getC_data,
       WILL_FIRE_RL_putC_data,
       WILL_FIRE_loadA,
       WILL_FIRE_loadB,
       WILL_FIRE_loadS;

  // remaining internal signals
  wire cells_0_1_RDY_getB__0_AND_cells_0_2_RDY_getB___ETC___d100,
       cells_0_3_RDY_getA__8_AND_cells_1_0_RDY_getA___ETC___d82,
       cells_0_3_RDY_getC__6_AND_cells_1_0_RDY_getC___ETC___d279,
       cells_0_3_RDY_getS__0_AND_cells_1_0_RDY_getS___ETC___d130,
       cells_1_1_RDY_getC__8_AND_cells_1_2_RDY_getC___ETC___d112,
       cells_1_3_RDY_getB__6_AND_cells_2_0_RDY_getB___ETC___d94,
       cells_2_1_RDY_getA__4_AND_cells_2_2_RDY_getA___ETC___d76,
       cells_2_1_RDY_getC__2_AND_cells_2_2_RDY_getC___ETC___d273,
       cells_2_1_RDY_getS__6_AND_cells_2_2_RDY_getS___ETC___d124,
       cells_2_3_RDY_getC__4_AND_cells_3_0_RDY_getC___ETC___d106,
       cells_3_1_RDY_getB__2_AND_cells_3_2_RDY_getB___ETC___d88,
       cells_3_3_RDY_getS__2_AND_cells_0_0_RDY_getC___ETC___d118,
       cycle_08_ULT_4___d209;

  // action method loadA
  assign RDY_loadA = 1'd1 ;
  assign CAN_FIRE_loadA = 1'd1 ;
  assign WILL_FIRE_loadA = EN_loadA ;

  // action method loadB
  assign RDY_loadB = 1'd1 ;
  assign CAN_FIRE_loadB = 1'd1 ;
  assign WILL_FIRE_loadB = EN_loadB ;

  // action method loadS
  assign RDY_loadS = 1'd1 ;
  assign CAN_FIRE_loadS = 1'd1 ;
  assign WILL_FIRE_loadS = EN_loadS ;

  // value method getResult
  assign getResult =
	     { cells_3_3_getC,
	       cells_3_2_getC,
	       cells_3_1_getC,
	       cells_3_0_getC,
	       cells_2_3_getC,
	       cells_2_2_getC,
	       cells_2_1_getC,
	       cells_2_0_getC,
	       cells_1_3_getC,
	       cells_1_2_getC,
	       cells_1_1_getC,
	       cells_1_0_getC,
	       cells_0_3_getC,
	       cells_0_2_getC,
	       cells_0_1_getC,
	       cells_0_0_getC } ;
  assign RDY_getResult =
	     cells_0_0_RDY_getC && cells_0_1_RDY_getC && cells_0_2_RDY_getC &&
	     cells_0_3_RDY_getC__6_AND_cells_1_0_RDY_getC___ETC___d279 ;

  // value method isReady
  assign isReady = initialized && cycle == 3'd7 ;
  assign RDY_isReady = 1'd1 ;

  // submodule cells_0_0
  mkSystolicCell cells_0_0(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_0_0_putA_a),
			   .putB_b(cells_0_0_putB_b),
			   .putC_c(cells_0_0_putC_c),
			   .putS_s(cells_0_0_putS_s),
			   .EN_putA(cells_0_0_EN_putA),
			   .EN_putB(cells_0_0_EN_putB),
			   .EN_putC(cells_0_0_EN_putC),
			   .EN_putS(cells_0_0_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_0_0_getA),
			   .RDY_getA(cells_0_0_RDY_getA),
			   .getB(cells_0_0_getB),
			   .RDY_getB(cells_0_0_RDY_getB),
			   .getC(cells_0_0_getC),
			   .RDY_getC(cells_0_0_RDY_getC),
			   .getS(cells_0_0_getS),
			   .RDY_getS(cells_0_0_RDY_getS));

  // submodule cells_0_1
  mkSystolicCell cells_0_1(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_0_1_putA_a),
			   .putB_b(cells_0_1_putB_b),
			   .putC_c(cells_0_1_putC_c),
			   .putS_s(cells_0_1_putS_s),
			   .EN_putA(cells_0_1_EN_putA),
			   .EN_putB(cells_0_1_EN_putB),
			   .EN_putC(cells_0_1_EN_putC),
			   .EN_putS(cells_0_1_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_0_1_getA),
			   .RDY_getA(cells_0_1_RDY_getA),
			   .getB(cells_0_1_getB),
			   .RDY_getB(cells_0_1_RDY_getB),
			   .getC(cells_0_1_getC),
			   .RDY_getC(cells_0_1_RDY_getC),
			   .getS(cells_0_1_getS),
			   .RDY_getS(cells_0_1_RDY_getS));

  // submodule cells_0_2
  mkSystolicCell cells_0_2(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_0_2_putA_a),
			   .putB_b(cells_0_2_putB_b),
			   .putC_c(cells_0_2_putC_c),
			   .putS_s(cells_0_2_putS_s),
			   .EN_putA(cells_0_2_EN_putA),
			   .EN_putB(cells_0_2_EN_putB),
			   .EN_putC(cells_0_2_EN_putC),
			   .EN_putS(cells_0_2_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_0_2_getA),
			   .RDY_getA(cells_0_2_RDY_getA),
			   .getB(cells_0_2_getB),
			   .RDY_getB(cells_0_2_RDY_getB),
			   .getC(cells_0_2_getC),
			   .RDY_getC(cells_0_2_RDY_getC),
			   .getS(cells_0_2_getS),
			   .RDY_getS(cells_0_2_RDY_getS));

  // submodule cells_0_3
  mkSystolicCell cells_0_3(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_0_3_putA_a),
			   .putB_b(cells_0_3_putB_b),
			   .putC_c(cells_0_3_putC_c),
			   .putS_s(cells_0_3_putS_s),
			   .EN_putA(cells_0_3_EN_putA),
			   .EN_putB(cells_0_3_EN_putB),
			   .EN_putC(cells_0_3_EN_putC),
			   .EN_putS(cells_0_3_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_0_3_getA),
			   .RDY_getA(cells_0_3_RDY_getA),
			   .getB(cells_0_3_getB),
			   .RDY_getB(cells_0_3_RDY_getB),
			   .getC(cells_0_3_getC),
			   .RDY_getC(cells_0_3_RDY_getC),
			   .getS(cells_0_3_getS),
			   .RDY_getS(cells_0_3_RDY_getS));

  // submodule cells_1_0
  mkSystolicCell cells_1_0(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_1_0_putA_a),
			   .putB_b(cells_1_0_putB_b),
			   .putC_c(cells_1_0_putC_c),
			   .putS_s(cells_1_0_putS_s),
			   .EN_putA(cells_1_0_EN_putA),
			   .EN_putB(cells_1_0_EN_putB),
			   .EN_putC(cells_1_0_EN_putC),
			   .EN_putS(cells_1_0_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_1_0_getA),
			   .RDY_getA(cells_1_0_RDY_getA),
			   .getB(cells_1_0_getB),
			   .RDY_getB(cells_1_0_RDY_getB),
			   .getC(cells_1_0_getC),
			   .RDY_getC(cells_1_0_RDY_getC),
			   .getS(cells_1_0_getS),
			   .RDY_getS(cells_1_0_RDY_getS));

  // submodule cells_1_1
  mkSystolicCell cells_1_1(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_1_1_putA_a),
			   .putB_b(cells_1_1_putB_b),
			   .putC_c(cells_1_1_putC_c),
			   .putS_s(cells_1_1_putS_s),
			   .EN_putA(cells_1_1_EN_putA),
			   .EN_putB(cells_1_1_EN_putB),
			   .EN_putC(cells_1_1_EN_putC),
			   .EN_putS(cells_1_1_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_1_1_getA),
			   .RDY_getA(cells_1_1_RDY_getA),
			   .getB(cells_1_1_getB),
			   .RDY_getB(cells_1_1_RDY_getB),
			   .getC(cells_1_1_getC),
			   .RDY_getC(cells_1_1_RDY_getC),
			   .getS(cells_1_1_getS),
			   .RDY_getS(cells_1_1_RDY_getS));

  // submodule cells_1_2
  mkSystolicCell cells_1_2(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_1_2_putA_a),
			   .putB_b(cells_1_2_putB_b),
			   .putC_c(cells_1_2_putC_c),
			   .putS_s(cells_1_2_putS_s),
			   .EN_putA(cells_1_2_EN_putA),
			   .EN_putB(cells_1_2_EN_putB),
			   .EN_putC(cells_1_2_EN_putC),
			   .EN_putS(cells_1_2_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_1_2_getA),
			   .RDY_getA(cells_1_2_RDY_getA),
			   .getB(cells_1_2_getB),
			   .RDY_getB(cells_1_2_RDY_getB),
			   .getC(cells_1_2_getC),
			   .RDY_getC(cells_1_2_RDY_getC),
			   .getS(cells_1_2_getS),
			   .RDY_getS(cells_1_2_RDY_getS));

  // submodule cells_1_3
  mkSystolicCell cells_1_3(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_1_3_putA_a),
			   .putB_b(cells_1_3_putB_b),
			   .putC_c(cells_1_3_putC_c),
			   .putS_s(cells_1_3_putS_s),
			   .EN_putA(cells_1_3_EN_putA),
			   .EN_putB(cells_1_3_EN_putB),
			   .EN_putC(cells_1_3_EN_putC),
			   .EN_putS(cells_1_3_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_1_3_getA),
			   .RDY_getA(cells_1_3_RDY_getA),
			   .getB(cells_1_3_getB),
			   .RDY_getB(cells_1_3_RDY_getB),
			   .getC(cells_1_3_getC),
			   .RDY_getC(cells_1_3_RDY_getC),
			   .getS(cells_1_3_getS),
			   .RDY_getS(cells_1_3_RDY_getS));

  // submodule cells_2_0
  mkSystolicCell cells_2_0(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_2_0_putA_a),
			   .putB_b(cells_2_0_putB_b),
			   .putC_c(cells_2_0_putC_c),
			   .putS_s(cells_2_0_putS_s),
			   .EN_putA(cells_2_0_EN_putA),
			   .EN_putB(cells_2_0_EN_putB),
			   .EN_putC(cells_2_0_EN_putC),
			   .EN_putS(cells_2_0_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_2_0_getA),
			   .RDY_getA(cells_2_0_RDY_getA),
			   .getB(cells_2_0_getB),
			   .RDY_getB(cells_2_0_RDY_getB),
			   .getC(cells_2_0_getC),
			   .RDY_getC(cells_2_0_RDY_getC),
			   .getS(cells_2_0_getS),
			   .RDY_getS(cells_2_0_RDY_getS));

  // submodule cells_2_1
  mkSystolicCell cells_2_1(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_2_1_putA_a),
			   .putB_b(cells_2_1_putB_b),
			   .putC_c(cells_2_1_putC_c),
			   .putS_s(cells_2_1_putS_s),
			   .EN_putA(cells_2_1_EN_putA),
			   .EN_putB(cells_2_1_EN_putB),
			   .EN_putC(cells_2_1_EN_putC),
			   .EN_putS(cells_2_1_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_2_1_getA),
			   .RDY_getA(cells_2_1_RDY_getA),
			   .getB(cells_2_1_getB),
			   .RDY_getB(cells_2_1_RDY_getB),
			   .getC(cells_2_1_getC),
			   .RDY_getC(cells_2_1_RDY_getC),
			   .getS(cells_2_1_getS),
			   .RDY_getS(cells_2_1_RDY_getS));

  // submodule cells_2_2
  mkSystolicCell cells_2_2(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_2_2_putA_a),
			   .putB_b(cells_2_2_putB_b),
			   .putC_c(cells_2_2_putC_c),
			   .putS_s(cells_2_2_putS_s),
			   .EN_putA(cells_2_2_EN_putA),
			   .EN_putB(cells_2_2_EN_putB),
			   .EN_putC(cells_2_2_EN_putC),
			   .EN_putS(cells_2_2_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_2_2_getA),
			   .RDY_getA(cells_2_2_RDY_getA),
			   .getB(cells_2_2_getB),
			   .RDY_getB(cells_2_2_RDY_getB),
			   .getC(cells_2_2_getC),
			   .RDY_getC(cells_2_2_RDY_getC),
			   .getS(cells_2_2_getS),
			   .RDY_getS(cells_2_2_RDY_getS));

  // submodule cells_2_3
  mkSystolicCell cells_2_3(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_2_3_putA_a),
			   .putB_b(cells_2_3_putB_b),
			   .putC_c(cells_2_3_putC_c),
			   .putS_s(cells_2_3_putS_s),
			   .EN_putA(cells_2_3_EN_putA),
			   .EN_putB(cells_2_3_EN_putB),
			   .EN_putC(cells_2_3_EN_putC),
			   .EN_putS(cells_2_3_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_2_3_getA),
			   .RDY_getA(cells_2_3_RDY_getA),
			   .getB(cells_2_3_getB),
			   .RDY_getB(cells_2_3_RDY_getB),
			   .getC(cells_2_3_getC),
			   .RDY_getC(cells_2_3_RDY_getC),
			   .getS(cells_2_3_getS),
			   .RDY_getS(cells_2_3_RDY_getS));

  // submodule cells_3_0
  mkSystolicCell cells_3_0(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_3_0_putA_a),
			   .putB_b(cells_3_0_putB_b),
			   .putC_c(cells_3_0_putC_c),
			   .putS_s(cells_3_0_putS_s),
			   .EN_putA(cells_3_0_EN_putA),
			   .EN_putB(cells_3_0_EN_putB),
			   .EN_putC(cells_3_0_EN_putC),
			   .EN_putS(cells_3_0_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_3_0_getA),
			   .RDY_getA(cells_3_0_RDY_getA),
			   .getB(cells_3_0_getB),
			   .RDY_getB(cells_3_0_RDY_getB),
			   .getC(cells_3_0_getC),
			   .RDY_getC(cells_3_0_RDY_getC),
			   .getS(cells_3_0_getS),
			   .RDY_getS(cells_3_0_RDY_getS));

  // submodule cells_3_1
  mkSystolicCell cells_3_1(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_3_1_putA_a),
			   .putB_b(cells_3_1_putB_b),
			   .putC_c(cells_3_1_putC_c),
			   .putS_s(cells_3_1_putS_s),
			   .EN_putA(cells_3_1_EN_putA),
			   .EN_putB(cells_3_1_EN_putB),
			   .EN_putC(cells_3_1_EN_putC),
			   .EN_putS(cells_3_1_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_3_1_getA),
			   .RDY_getA(cells_3_1_RDY_getA),
			   .getB(cells_3_1_getB),
			   .RDY_getB(cells_3_1_RDY_getB),
			   .getC(cells_3_1_getC),
			   .RDY_getC(cells_3_1_RDY_getC),
			   .getS(cells_3_1_getS),
			   .RDY_getS(cells_3_1_RDY_getS));

  // submodule cells_3_2
  mkSystolicCell cells_3_2(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_3_2_putA_a),
			   .putB_b(cells_3_2_putB_b),
			   .putC_c(cells_3_2_putC_c),
			   .putS_s(cells_3_2_putS_s),
			   .EN_putA(cells_3_2_EN_putA),
			   .EN_putB(cells_3_2_EN_putB),
			   .EN_putC(cells_3_2_EN_putC),
			   .EN_putS(cells_3_2_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_3_2_getA),
			   .RDY_getA(cells_3_2_RDY_getA),
			   .getB(cells_3_2_getB),
			   .RDY_getB(cells_3_2_RDY_getB),
			   .getC(cells_3_2_getC),
			   .RDY_getC(cells_3_2_RDY_getC),
			   .getS(cells_3_2_getS),
			   .RDY_getS(cells_3_2_RDY_getS));

  // submodule cells_3_3
  mkSystolicCell cells_3_3(.CLK(CLK),
			   .RST_N(RST_N),
			   .putA_a(cells_3_3_putA_a),
			   .putB_b(cells_3_3_putB_b),
			   .putC_c(cells_3_3_putC_c),
			   .putS_s(cells_3_3_putS_s),
			   .EN_putA(cells_3_3_EN_putA),
			   .EN_putB(cells_3_3_EN_putB),
			   .EN_putC(cells_3_3_EN_putC),
			   .EN_putS(cells_3_3_EN_putS),
			   .RDY_putA(),
			   .RDY_putB(),
			   .RDY_putC(),
			   .RDY_putS(),
			   .getA(cells_3_3_getA),
			   .RDY_getA(cells_3_3_RDY_getA),
			   .getB(cells_3_3_getB),
			   .RDY_getB(cells_3_3_RDY_getB),
			   .getC(cells_3_3_getC),
			   .RDY_getC(cells_3_3_RDY_getC),
			   .getS(cells_3_3_getS),
			   .RDY_getS(cells_3_3_RDY_getS));

  // rule RL_getC_data
  assign CAN_FIRE_RL_getC_data =
	     cells_0_0_RDY_getS && cells_0_1_RDY_getS && cells_0_2_RDY_getS &&
	     cells_0_3_RDY_getS__0_AND_cells_1_0_RDY_getS___ETC___d130 &&
	     !datacollect ;
  assign WILL_FIRE_RL_getC_data = CAN_FIRE_RL_getC_data ;

  // rule RL_putC_data
  assign CAN_FIRE_RL_putC_data = datacollect && bcheck ;
  assign WILL_FIRE_RL_putC_data = CAN_FIRE_RL_putC_data ;

  // rule RL_datacollect__dreg_update
  assign CAN_FIRE_RL_datacollect__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_datacollect__dreg_update = 1'd1 ;

  // rule RL_bcheck__dreg_update
  assign CAN_FIRE_RL_bcheck__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_bcheck__dreg_update = 1'd1 ;

  // register bcheck
  assign bcheck_D_IN = 1'b0 ;
  assign bcheck_EN = 1'd1 ;

  // register bsum
  assign bsum_D_IN = 16'h0 ;
  assign bsum_EN = 1'b0 ;

  // register cycle
  assign cycle_D_IN = cycle + 3'd1 ;
  assign cycle_EN = EN_loadB ;

  // register datacollect
  assign datacollect_D_IN = CAN_FIRE_RL_getC_data ;
  assign datacollect_EN = 1'd1 ;

  // register initialized
  assign initialized_D_IN = 1'd1 ;
  assign initialized_EN = EN_loadS ;

  // register tempA_0_0
  assign tempA_0_0_D_IN = cells_0_0_getA ;
  assign tempA_0_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_0_1
  assign tempA_0_1_D_IN = cells_0_1_getA ;
  assign tempA_0_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_0_2
  assign tempA_0_2_D_IN = cells_0_2_getA ;
  assign tempA_0_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_0_3
  assign tempA_0_3_D_IN = cells_0_3_getA ;
  assign tempA_0_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_1_0
  assign tempA_1_0_D_IN = cells_1_0_getA ;
  assign tempA_1_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_1_1
  assign tempA_1_1_D_IN = cells_1_1_getA ;
  assign tempA_1_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_1_2
  assign tempA_1_2_D_IN = cells_1_2_getA ;
  assign tempA_1_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_1_3
  assign tempA_1_3_D_IN = cells_1_3_getA ;
  assign tempA_1_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_2_0
  assign tempA_2_0_D_IN = cells_2_0_getA ;
  assign tempA_2_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_2_1
  assign tempA_2_1_D_IN = cells_2_1_getA ;
  assign tempA_2_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_2_2
  assign tempA_2_2_D_IN = cells_2_2_getA ;
  assign tempA_2_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_2_3
  assign tempA_2_3_D_IN = cells_2_3_getA ;
  assign tempA_2_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_3_0
  assign tempA_3_0_D_IN = cells_3_0_getA ;
  assign tempA_3_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_3_1
  assign tempA_3_1_D_IN = cells_3_1_getA ;
  assign tempA_3_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_3_2
  assign tempA_3_2_D_IN = cells_3_2_getA ;
  assign tempA_3_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempA_3_3
  assign tempA_3_3_D_IN = cells_3_3_getA ;
  assign tempA_3_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_0_0
  assign tempB_0_0_D_IN = cells_0_0_getB ;
  assign tempB_0_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_0_1
  assign tempB_0_1_D_IN = cells_0_1_getB ;
  assign tempB_0_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_0_2
  assign tempB_0_2_D_IN = cells_0_2_getB ;
  assign tempB_0_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_0_3
  assign tempB_0_3_D_IN = cells_0_3_getB ;
  assign tempB_0_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_1_0
  assign tempB_1_0_D_IN = cells_1_0_getB ;
  assign tempB_1_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_1_1
  assign tempB_1_1_D_IN = cells_1_1_getB ;
  assign tempB_1_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_1_2
  assign tempB_1_2_D_IN = cells_1_2_getB ;
  assign tempB_1_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_1_3
  assign tempB_1_3_D_IN = cells_1_3_getB ;
  assign tempB_1_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_2_0
  assign tempB_2_0_D_IN = cells_2_0_getB ;
  assign tempB_2_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_2_1
  assign tempB_2_1_D_IN = cells_2_1_getB ;
  assign tempB_2_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_2_2
  assign tempB_2_2_D_IN = cells_2_2_getB ;
  assign tempB_2_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_2_3
  assign tempB_2_3_D_IN = cells_2_3_getB ;
  assign tempB_2_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_3_0
  assign tempB_3_0_D_IN = cells_3_0_getB ;
  assign tempB_3_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_3_1
  assign tempB_3_1_D_IN = cells_3_1_getB ;
  assign tempB_3_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_3_2
  assign tempB_3_2_D_IN = cells_3_2_getB ;
  assign tempB_3_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempB_3_3
  assign tempB_3_3_D_IN = cells_3_3_getB ;
  assign tempB_3_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_0_0
  assign tempC_0_0_D_IN = cells_0_0_getC ;
  assign tempC_0_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_0_1
  assign tempC_0_1_D_IN = cells_0_1_getC ;
  assign tempC_0_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_0_2
  assign tempC_0_2_D_IN = cells_0_2_getC ;
  assign tempC_0_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_0_3
  assign tempC_0_3_D_IN = cells_0_3_getC ;
  assign tempC_0_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_1_0
  assign tempC_1_0_D_IN = cells_1_0_getC ;
  assign tempC_1_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_1_1
  assign tempC_1_1_D_IN = cells_1_1_getC ;
  assign tempC_1_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_1_2
  assign tempC_1_2_D_IN = cells_1_2_getC ;
  assign tempC_1_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_1_3
  assign tempC_1_3_D_IN = cells_1_3_getC ;
  assign tempC_1_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_2_0
  assign tempC_2_0_D_IN = cells_2_0_getC ;
  assign tempC_2_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_2_1
  assign tempC_2_1_D_IN = cells_2_1_getC ;
  assign tempC_2_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_2_2
  assign tempC_2_2_D_IN = cells_2_2_getC ;
  assign tempC_2_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_2_3
  assign tempC_2_3_D_IN = cells_2_3_getC ;
  assign tempC_2_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_3_0
  assign tempC_3_0_D_IN = cells_3_0_getC ;
  assign tempC_3_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_3_1
  assign tempC_3_1_D_IN = cells_3_1_getC ;
  assign tempC_3_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_3_2
  assign tempC_3_2_D_IN = cells_3_2_getC ;
  assign tempC_3_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempC_3_3
  assign tempC_3_3_D_IN = cells_3_3_getC ;
  assign tempC_3_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_0_0
  assign tempS_0_0_D_IN = cells_0_0_getS ;
  assign tempS_0_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_0_1
  assign tempS_0_1_D_IN = cells_0_1_getS ;
  assign tempS_0_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_0_2
  assign tempS_0_2_D_IN = cells_0_2_getS ;
  assign tempS_0_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_0_3
  assign tempS_0_3_D_IN = cells_0_3_getS ;
  assign tempS_0_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_1_0
  assign tempS_1_0_D_IN = cells_1_0_getS ;
  assign tempS_1_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_1_1
  assign tempS_1_1_D_IN = cells_1_1_getS ;
  assign tempS_1_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_1_2
  assign tempS_1_2_D_IN = cells_1_2_getS ;
  assign tempS_1_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_1_3
  assign tempS_1_3_D_IN = cells_1_3_getS ;
  assign tempS_1_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_2_0
  assign tempS_2_0_D_IN = cells_2_0_getS ;
  assign tempS_2_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_2_1
  assign tempS_2_1_D_IN = cells_2_1_getS ;
  assign tempS_2_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_2_2
  assign tempS_2_2_D_IN = cells_2_2_getS ;
  assign tempS_2_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_2_3
  assign tempS_2_3_D_IN = cells_2_3_getS ;
  assign tempS_2_3_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_3_0
  assign tempS_3_0_D_IN = cells_3_0_getS ;
  assign tempS_3_0_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_3_1
  assign tempS_3_1_D_IN = cells_3_1_getS ;
  assign tempS_3_1_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_3_2
  assign tempS_3_2_D_IN = cells_3_2_getS ;
  assign tempS_3_2_EN = CAN_FIRE_RL_getC_data ;

  // register tempS_3_3
  assign tempS_3_3_D_IN = cells_3_3_getS ;
  assign tempS_3_3_EN = CAN_FIRE_RL_getC_data ;

  // submodule cells_0_0
  assign cells_0_0_putA_a = loadA_a[15:0] ;
  assign cells_0_0_putB_b = loadB_b[15:0] ;
  assign cells_0_0_putC_c = 32'd0 ;
  assign cells_0_0_putS_s = loadS_s ;
  assign cells_0_0_EN_putA = EN_loadA ;
  assign cells_0_0_EN_putB = EN_loadB && cycle_08_ULT_4___d209 ;
  assign cells_0_0_EN_putC = EN_loadB && cycle_08_ULT_4___d209 ;
  assign cells_0_0_EN_putS = EN_loadS ;

  // submodule cells_0_1
  assign cells_0_1_putA_a = tempA_0_0 ;
  assign cells_0_1_putB_b = loadB_b[31:16] ;
  assign cells_0_1_putC_c = 32'd0 ;
  assign cells_0_1_putS_s = loadS_s ;
  assign cells_0_1_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_0_1_EN_putB = EN_loadB && cycle_08_ULT_4___d209 ;
  assign cells_0_1_EN_putC = EN_loadB && cycle_08_ULT_4___d209 ;
  assign cells_0_1_EN_putS = EN_loadS ;

  // submodule cells_0_2
  assign cells_0_2_putA_a = tempA_0_1 ;
  assign cells_0_2_putB_b = loadB_b[47:32] ;
  assign cells_0_2_putC_c = 32'd0 ;
  assign cells_0_2_putS_s = loadS_s ;
  assign cells_0_2_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_0_2_EN_putB = EN_loadB && cycle_08_ULT_4___d209 ;
  assign cells_0_2_EN_putC = EN_loadB && cycle_08_ULT_4___d209 ;
  assign cells_0_2_EN_putS = EN_loadS ;

  // submodule cells_0_3
  assign cells_0_3_putA_a = tempA_0_2 ;
  assign cells_0_3_putB_b = loadB_b[63:48] ;
  assign cells_0_3_putC_c = 32'd0 ;
  assign cells_0_3_putS_s = loadS_s ;
  assign cells_0_3_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_0_3_EN_putB = EN_loadB && cycle_08_ULT_4___d209 ;
  assign cells_0_3_EN_putC = EN_loadB && cycle_08_ULT_4___d209 ;
  assign cells_0_3_EN_putS = EN_loadS ;

  // submodule cells_1_0
  assign cells_1_0_putA_a = loadA_a[31:16] ;
  assign cells_1_0_putB_b = tempB_0_0 ;
  assign cells_1_0_putC_c = tempC_0_0 ;
  assign cells_1_0_putS_s = WILL_FIRE_RL_putC_data ? tempS_0_0 : loadS_s ;
  assign cells_1_0_EN_putA = EN_loadA ;
  assign cells_1_0_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_1_0_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_1_0_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_1_1
  assign cells_1_1_putA_a = tempA_1_0 ;
  assign cells_1_1_putB_b = tempB_0_1 ;
  assign cells_1_1_putC_c = tempC_0_1 ;
  assign cells_1_1_putS_s = WILL_FIRE_RL_putC_data ? tempS_0_1 : loadS_s ;
  assign cells_1_1_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_1_1_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_1_1_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_1_1_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_1_2
  assign cells_1_2_putA_a = tempA_1_1 ;
  assign cells_1_2_putB_b = tempB_0_2 ;
  assign cells_1_2_putC_c = tempC_0_2 ;
  assign cells_1_2_putS_s = WILL_FIRE_RL_putC_data ? tempS_0_2 : loadS_s ;
  assign cells_1_2_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_1_2_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_1_2_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_1_2_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_1_3
  assign cells_1_3_putA_a = tempA_1_2 ;
  assign cells_1_3_putB_b = tempB_0_3 ;
  assign cells_1_3_putC_c = tempC_0_3 ;
  assign cells_1_3_putS_s = WILL_FIRE_RL_putC_data ? tempS_0_3 : loadS_s ;
  assign cells_1_3_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_1_3_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_1_3_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_1_3_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_2_0
  assign cells_2_0_putA_a = loadA_a[47:32] ;
  assign cells_2_0_putB_b = tempB_1_0 ;
  assign cells_2_0_putC_c = tempC_1_0 ;
  assign cells_2_0_putS_s = WILL_FIRE_RL_putC_data ? tempS_1_0 : loadS_s ;
  assign cells_2_0_EN_putA = EN_loadA ;
  assign cells_2_0_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_2_0_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_2_0_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_2_1
  assign cells_2_1_putA_a = tempA_2_0 ;
  assign cells_2_1_putB_b = tempB_1_1 ;
  assign cells_2_1_putC_c = tempC_1_1 ;
  assign cells_2_1_putS_s = WILL_FIRE_RL_putC_data ? tempS_1_1 : loadS_s ;
  assign cells_2_1_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_2_1_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_2_1_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_2_1_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_2_2
  assign cells_2_2_putA_a = tempA_2_1 ;
  assign cells_2_2_putB_b = tempB_1_2 ;
  assign cells_2_2_putC_c = tempC_1_2 ;
  assign cells_2_2_putS_s = WILL_FIRE_RL_putC_data ? tempS_1_2 : loadS_s ;
  assign cells_2_2_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_2_2_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_2_2_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_2_2_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_2_3
  assign cells_2_3_putA_a = tempA_2_2 ;
  assign cells_2_3_putB_b = tempB_1_3 ;
  assign cells_2_3_putC_c = tempC_1_3 ;
  assign cells_2_3_putS_s = WILL_FIRE_RL_putC_data ? tempS_1_3 : loadS_s ;
  assign cells_2_3_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_2_3_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_2_3_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_2_3_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_3_0
  assign cells_3_0_putA_a = loadA_a[63:48] ;
  assign cells_3_0_putB_b = tempB_2_0 ;
  assign cells_3_0_putC_c = tempC_2_0 ;
  assign cells_3_0_putS_s = WILL_FIRE_RL_putC_data ? tempS_2_0 : loadS_s ;
  assign cells_3_0_EN_putA = EN_loadA ;
  assign cells_3_0_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_3_0_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_3_0_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_3_1
  assign cells_3_1_putA_a = tempA_3_0 ;
  assign cells_3_1_putB_b = tempB_2_1 ;
  assign cells_3_1_putC_c = tempC_2_1 ;
  assign cells_3_1_putS_s = WILL_FIRE_RL_putC_data ? tempS_2_1 : loadS_s ;
  assign cells_3_1_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_3_1_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_3_1_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_3_1_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_3_2
  assign cells_3_2_putA_a = tempA_3_1 ;
  assign cells_3_2_putB_b = tempB_2_2 ;
  assign cells_3_2_putC_c = tempC_2_2 ;
  assign cells_3_2_putS_s = WILL_FIRE_RL_putC_data ? tempS_2_2 : loadS_s ;
  assign cells_3_2_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_3_2_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_3_2_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_3_2_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // submodule cells_3_3
  assign cells_3_3_putA_a = tempA_3_2 ;
  assign cells_3_3_putB_b = tempB_2_3 ;
  assign cells_3_3_putC_c = tempC_2_3 ;
  assign cells_3_3_putS_s = WILL_FIRE_RL_putC_data ? tempS_2_3 : loadS_s ;
  assign cells_3_3_EN_putA = CAN_FIRE_RL_putC_data ;
  assign cells_3_3_EN_putB = WILL_FIRE_RL_putC_data && cycle_08_ULT_4___d209 ;
  assign cells_3_3_EN_putC = CAN_FIRE_RL_putC_data ;
  assign cells_3_3_EN_putS = EN_loadS || WILL_FIRE_RL_putC_data ;

  // remaining internal signals
  assign cells_0_1_RDY_getB__0_AND_cells_0_2_RDY_getB___ETC___d100 =
	     cells_0_1_RDY_getB && cells_0_2_RDY_getB && cells_0_3_RDY_getB &&
	     cells_1_0_RDY_getB &&
	     cells_1_1_RDY_getB &&
	     cells_1_2_RDY_getB &&
	     cells_1_3_RDY_getB__6_AND_cells_2_0_RDY_getB___ETC___d94 ;
  assign cells_0_3_RDY_getA__8_AND_cells_1_0_RDY_getA___ETC___d82 =
	     cells_0_3_RDY_getA && cells_1_0_RDY_getA && cells_1_1_RDY_getA &&
	     cells_1_2_RDY_getA &&
	     cells_1_3_RDY_getA &&
	     cells_2_0_RDY_getA &&
	     cells_2_1_RDY_getA__4_AND_cells_2_2_RDY_getA___ETC___d76 ;
  assign cells_0_3_RDY_getC__6_AND_cells_1_0_RDY_getC___ETC___d279 =
	     cells_0_3_RDY_getC && cells_1_0_RDY_getC && cells_1_1_RDY_getC &&
	     cells_1_2_RDY_getC &&
	     cells_1_3_RDY_getC &&
	     cells_2_0_RDY_getC &&
	     cells_2_1_RDY_getC__2_AND_cells_2_2_RDY_getC___ETC___d273 ;
  assign cells_0_3_RDY_getS__0_AND_cells_1_0_RDY_getS___ETC___d130 =
	     cells_0_3_RDY_getS && cells_1_0_RDY_getS && cells_1_1_RDY_getS &&
	     cells_1_2_RDY_getS &&
	     cells_1_3_RDY_getS &&
	     cells_2_0_RDY_getS &&
	     cells_2_1_RDY_getS__6_AND_cells_2_2_RDY_getS___ETC___d124 ;
  assign cells_1_1_RDY_getC__8_AND_cells_1_2_RDY_getC___ETC___d112 =
	     cells_1_1_RDY_getC && cells_1_2_RDY_getC && cells_1_3_RDY_getC &&
	     cells_2_0_RDY_getC &&
	     cells_2_1_RDY_getC &&
	     cells_2_2_RDY_getC &&
	     cells_2_3_RDY_getC__4_AND_cells_3_0_RDY_getC___ETC___d106 ;
  assign cells_1_3_RDY_getB__6_AND_cells_2_0_RDY_getB___ETC___d94 =
	     cells_1_3_RDY_getB && cells_2_0_RDY_getB && cells_2_1_RDY_getB &&
	     cells_2_2_RDY_getB &&
	     cells_2_3_RDY_getB &&
	     cells_3_0_RDY_getB &&
	     cells_3_1_RDY_getB__2_AND_cells_3_2_RDY_getB___ETC___d88 ;
  assign cells_2_1_RDY_getA__4_AND_cells_2_2_RDY_getA___ETC___d76 =
	     cells_2_1_RDY_getA && cells_2_2_RDY_getA && cells_2_3_RDY_getA &&
	     cells_3_0_RDY_getA &&
	     cells_3_1_RDY_getA &&
	     cells_3_2_RDY_getA &&
	     cells_3_3_RDY_getA ;
  assign cells_2_1_RDY_getC__2_AND_cells_2_2_RDY_getC___ETC___d273 =
	     cells_2_1_RDY_getC && cells_2_2_RDY_getC && cells_2_3_RDY_getC &&
	     cells_3_0_RDY_getC &&
	     cells_3_1_RDY_getC &&
	     cells_3_2_RDY_getC &&
	     cells_3_3_RDY_getC ;
  assign cells_2_1_RDY_getS__6_AND_cells_2_2_RDY_getS___ETC___d124 =
	     cells_2_1_RDY_getS && cells_2_2_RDY_getS && cells_2_3_RDY_getS &&
	     cells_3_0_RDY_getS &&
	     cells_3_1_RDY_getS &&
	     cells_3_2_RDY_getS &&
	     cells_3_3_RDY_getS__2_AND_cells_0_0_RDY_getC___ETC___d118 ;
  assign cells_2_3_RDY_getC__4_AND_cells_3_0_RDY_getC___ETC___d106 =
	     cells_2_3_RDY_getC && cells_3_0_RDY_getC && cells_3_1_RDY_getC &&
	     cells_3_2_RDY_getC &&
	     cells_3_3_RDY_getC &&
	     cells_0_0_RDY_getB &&
	     cells_0_1_RDY_getB__0_AND_cells_0_2_RDY_getB___ETC___d100 ;
  assign cells_3_1_RDY_getB__2_AND_cells_3_2_RDY_getB___ETC___d88 =
	     cells_3_1_RDY_getB && cells_3_2_RDY_getB && cells_3_3_RDY_getB &&
	     cells_0_0_RDY_getA &&
	     cells_0_1_RDY_getA &&
	     cells_0_2_RDY_getA &&
	     cells_0_3_RDY_getA__8_AND_cells_1_0_RDY_getA___ETC___d82 ;
  assign cells_3_3_RDY_getS__2_AND_cells_0_0_RDY_getC___ETC___d118 =
	     cells_3_3_RDY_getS && cells_0_0_RDY_getC && cells_0_1_RDY_getC &&
	     cells_0_2_RDY_getC &&
	     cells_0_3_RDY_getC &&
	     cells_1_0_RDY_getC &&
	     cells_1_1_RDY_getC__8_AND_cells_1_2_RDY_getC___ETC___d112 ;
  assign cycle_08_ULT_4___d209 = cycle < 3'd4 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        bcheck <= `BSV_ASSIGNMENT_DELAY 1'd0;
	bsum <= `BSV_ASSIGNMENT_DELAY 16'd0;
	cycle <= `BSV_ASSIGNMENT_DELAY 3'd0;
	datacollect <= `BSV_ASSIGNMENT_DELAY 1'd0;
	initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempA_0_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_0_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_0_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_0_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_2_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_2_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_2_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_2_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_3_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_3_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_3_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempA_3_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_0_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_0_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_0_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_0_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_1_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_1_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_1_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_1_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_2_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_2_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_2_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_2_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_3_0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_3_1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_3_2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempB_3_3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	tempC_0_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_0_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_0_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_0_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_1_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_1_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_1_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_1_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_2_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_2_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_3_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_3_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_3_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempC_3_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	tempS_0_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_0_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_0_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_0_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_1_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_1_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_1_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_2_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_2_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_2_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_2_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_3_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_3_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	tempS_3_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (bcheck_EN) bcheck <= `BSV_ASSIGNMENT_DELAY bcheck_D_IN;
	if (bsum_EN) bsum <= `BSV_ASSIGNMENT_DELAY bsum_D_IN;
	if (cycle_EN) cycle <= `BSV_ASSIGNMENT_DELAY cycle_D_IN;
	if (datacollect_EN)
	  datacollect <= `BSV_ASSIGNMENT_DELAY datacollect_D_IN;
	if (initialized_EN)
	  initialized <= `BSV_ASSIGNMENT_DELAY initialized_D_IN;
	if (tempA_0_0_EN) tempA_0_0 <= `BSV_ASSIGNMENT_DELAY tempA_0_0_D_IN;
	if (tempA_0_1_EN) tempA_0_1 <= `BSV_ASSIGNMENT_DELAY tempA_0_1_D_IN;
	if (tempA_0_2_EN) tempA_0_2 <= `BSV_ASSIGNMENT_DELAY tempA_0_2_D_IN;
	if (tempA_0_3_EN) tempA_0_3 <= `BSV_ASSIGNMENT_DELAY tempA_0_3_D_IN;
	if (tempA_1_0_EN) tempA_1_0 <= `BSV_ASSIGNMENT_DELAY tempA_1_0_D_IN;
	if (tempA_1_1_EN) tempA_1_1 <= `BSV_ASSIGNMENT_DELAY tempA_1_1_D_IN;
	if (tempA_1_2_EN) tempA_1_2 <= `BSV_ASSIGNMENT_DELAY tempA_1_2_D_IN;
	if (tempA_1_3_EN) tempA_1_3 <= `BSV_ASSIGNMENT_DELAY tempA_1_3_D_IN;
	if (tempA_2_0_EN) tempA_2_0 <= `BSV_ASSIGNMENT_DELAY tempA_2_0_D_IN;
	if (tempA_2_1_EN) tempA_2_1 <= `BSV_ASSIGNMENT_DELAY tempA_2_1_D_IN;
	if (tempA_2_2_EN) tempA_2_2 <= `BSV_ASSIGNMENT_DELAY tempA_2_2_D_IN;
	if (tempA_2_3_EN) tempA_2_3 <= `BSV_ASSIGNMENT_DELAY tempA_2_3_D_IN;
	if (tempA_3_0_EN) tempA_3_0 <= `BSV_ASSIGNMENT_DELAY tempA_3_0_D_IN;
	if (tempA_3_1_EN) tempA_3_1 <= `BSV_ASSIGNMENT_DELAY tempA_3_1_D_IN;
	if (tempA_3_2_EN) tempA_3_2 <= `BSV_ASSIGNMENT_DELAY tempA_3_2_D_IN;
	if (tempA_3_3_EN) tempA_3_3 <= `BSV_ASSIGNMENT_DELAY tempA_3_3_D_IN;
	if (tempB_0_0_EN) tempB_0_0 <= `BSV_ASSIGNMENT_DELAY tempB_0_0_D_IN;
	if (tempB_0_1_EN) tempB_0_1 <= `BSV_ASSIGNMENT_DELAY tempB_0_1_D_IN;
	if (tempB_0_2_EN) tempB_0_2 <= `BSV_ASSIGNMENT_DELAY tempB_0_2_D_IN;
	if (tempB_0_3_EN) tempB_0_3 <= `BSV_ASSIGNMENT_DELAY tempB_0_3_D_IN;
	if (tempB_1_0_EN) tempB_1_0 <= `BSV_ASSIGNMENT_DELAY tempB_1_0_D_IN;
	if (tempB_1_1_EN) tempB_1_1 <= `BSV_ASSIGNMENT_DELAY tempB_1_1_D_IN;
	if (tempB_1_2_EN) tempB_1_2 <= `BSV_ASSIGNMENT_DELAY tempB_1_2_D_IN;
	if (tempB_1_3_EN) tempB_1_3 <= `BSV_ASSIGNMENT_DELAY tempB_1_3_D_IN;
	if (tempB_2_0_EN) tempB_2_0 <= `BSV_ASSIGNMENT_DELAY tempB_2_0_D_IN;
	if (tempB_2_1_EN) tempB_2_1 <= `BSV_ASSIGNMENT_DELAY tempB_2_1_D_IN;
	if (tempB_2_2_EN) tempB_2_2 <= `BSV_ASSIGNMENT_DELAY tempB_2_2_D_IN;
	if (tempB_2_3_EN) tempB_2_3 <= `BSV_ASSIGNMENT_DELAY tempB_2_3_D_IN;
	if (tempB_3_0_EN) tempB_3_0 <= `BSV_ASSIGNMENT_DELAY tempB_3_0_D_IN;
	if (tempB_3_1_EN) tempB_3_1 <= `BSV_ASSIGNMENT_DELAY tempB_3_1_D_IN;
	if (tempB_3_2_EN) tempB_3_2 <= `BSV_ASSIGNMENT_DELAY tempB_3_2_D_IN;
	if (tempB_3_3_EN) tempB_3_3 <= `BSV_ASSIGNMENT_DELAY tempB_3_3_D_IN;
	if (tempC_0_0_EN) tempC_0_0 <= `BSV_ASSIGNMENT_DELAY tempC_0_0_D_IN;
	if (tempC_0_1_EN) tempC_0_1 <= `BSV_ASSIGNMENT_DELAY tempC_0_1_D_IN;
	if (tempC_0_2_EN) tempC_0_2 <= `BSV_ASSIGNMENT_DELAY tempC_0_2_D_IN;
	if (tempC_0_3_EN) tempC_0_3 <= `BSV_ASSIGNMENT_DELAY tempC_0_3_D_IN;
	if (tempC_1_0_EN) tempC_1_0 <= `BSV_ASSIGNMENT_DELAY tempC_1_0_D_IN;
	if (tempC_1_1_EN) tempC_1_1 <= `BSV_ASSIGNMENT_DELAY tempC_1_1_D_IN;
	if (tempC_1_2_EN) tempC_1_2 <= `BSV_ASSIGNMENT_DELAY tempC_1_2_D_IN;
	if (tempC_1_3_EN) tempC_1_3 <= `BSV_ASSIGNMENT_DELAY tempC_1_3_D_IN;
	if (tempC_2_0_EN) tempC_2_0 <= `BSV_ASSIGNMENT_DELAY tempC_2_0_D_IN;
	if (tempC_2_1_EN) tempC_2_1 <= `BSV_ASSIGNMENT_DELAY tempC_2_1_D_IN;
	if (tempC_2_2_EN) tempC_2_2 <= `BSV_ASSIGNMENT_DELAY tempC_2_2_D_IN;
	if (tempC_2_3_EN) tempC_2_3 <= `BSV_ASSIGNMENT_DELAY tempC_2_3_D_IN;
	if (tempC_3_0_EN) tempC_3_0 <= `BSV_ASSIGNMENT_DELAY tempC_3_0_D_IN;
	if (tempC_3_1_EN) tempC_3_1 <= `BSV_ASSIGNMENT_DELAY tempC_3_1_D_IN;
	if (tempC_3_2_EN) tempC_3_2 <= `BSV_ASSIGNMENT_DELAY tempC_3_2_D_IN;
	if (tempC_3_3_EN) tempC_3_3 <= `BSV_ASSIGNMENT_DELAY tempC_3_3_D_IN;
	if (tempS_0_0_EN) tempS_0_0 <= `BSV_ASSIGNMENT_DELAY tempS_0_0_D_IN;
	if (tempS_0_1_EN) tempS_0_1 <= `BSV_ASSIGNMENT_DELAY tempS_0_1_D_IN;
	if (tempS_0_2_EN) tempS_0_2 <= `BSV_ASSIGNMENT_DELAY tempS_0_2_D_IN;
	if (tempS_0_3_EN) tempS_0_3 <= `BSV_ASSIGNMENT_DELAY tempS_0_3_D_IN;
	if (tempS_1_0_EN) tempS_1_0 <= `BSV_ASSIGNMENT_DELAY tempS_1_0_D_IN;
	if (tempS_1_1_EN) tempS_1_1 <= `BSV_ASSIGNMENT_DELAY tempS_1_1_D_IN;
	if (tempS_1_2_EN) tempS_1_2 <= `BSV_ASSIGNMENT_DELAY tempS_1_2_D_IN;
	if (tempS_1_3_EN) tempS_1_3 <= `BSV_ASSIGNMENT_DELAY tempS_1_3_D_IN;
	if (tempS_2_0_EN) tempS_2_0 <= `BSV_ASSIGNMENT_DELAY tempS_2_0_D_IN;
	if (tempS_2_1_EN) tempS_2_1 <= `BSV_ASSIGNMENT_DELAY tempS_2_1_D_IN;
	if (tempS_2_2_EN) tempS_2_2 <= `BSV_ASSIGNMENT_DELAY tempS_2_2_D_IN;
	if (tempS_2_3_EN) tempS_2_3 <= `BSV_ASSIGNMENT_DELAY tempS_2_3_D_IN;
	if (tempS_3_0_EN) tempS_3_0 <= `BSV_ASSIGNMENT_DELAY tempS_3_0_D_IN;
	if (tempS_3_1_EN) tempS_3_1 <= `BSV_ASSIGNMENT_DELAY tempS_3_1_D_IN;
	if (tempS_3_2_EN) tempS_3_2 <= `BSV_ASSIGNMENT_DELAY tempS_3_2_D_IN;
	if (tempS_3_3_EN) tempS_3_3 <= `BSV_ASSIGNMENT_DELAY tempS_3_3_D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    bcheck = 1'h0;
    bsum = 16'hAAAA;
    cycle = 3'h2;
    datacollect = 1'h0;
    initialized = 1'h0;
    tempA_0_0 = 16'hAAAA;
    tempA_0_1 = 16'hAAAA;
    tempA_0_2 = 16'hAAAA;
    tempA_0_3 = 16'hAAAA;
    tempA_1_0 = 16'hAAAA;
    tempA_1_1 = 16'hAAAA;
    tempA_1_2 = 16'hAAAA;
    tempA_1_3 = 16'hAAAA;
    tempA_2_0 = 16'hAAAA;
    tempA_2_1 = 16'hAAAA;
    tempA_2_2 = 16'hAAAA;
    tempA_2_3 = 16'hAAAA;
    tempA_3_0 = 16'hAAAA;
    tempA_3_1 = 16'hAAAA;
    tempA_3_2 = 16'hAAAA;
    tempA_3_3 = 16'hAAAA;
    tempB_0_0 = 16'hAAAA;
    tempB_0_1 = 16'hAAAA;
    tempB_0_2 = 16'hAAAA;
    tempB_0_3 = 16'hAAAA;
    tempB_1_0 = 16'hAAAA;
    tempB_1_1 = 16'hAAAA;
    tempB_1_2 = 16'hAAAA;
    tempB_1_3 = 16'hAAAA;
    tempB_2_0 = 16'hAAAA;
    tempB_2_1 = 16'hAAAA;
    tempB_2_2 = 16'hAAAA;
    tempB_2_3 = 16'hAAAA;
    tempB_3_0 = 16'hAAAA;
    tempB_3_1 = 16'hAAAA;
    tempB_3_2 = 16'hAAAA;
    tempB_3_3 = 16'hAAAA;
    tempC_0_0 = 32'hAAAAAAAA;
    tempC_0_1 = 32'hAAAAAAAA;
    tempC_0_2 = 32'hAAAAAAAA;
    tempC_0_3 = 32'hAAAAAAAA;
    tempC_1_0 = 32'hAAAAAAAA;
    tempC_1_1 = 32'hAAAAAAAA;
    tempC_1_2 = 32'hAAAAAAAA;
    tempC_1_3 = 32'hAAAAAAAA;
    tempC_2_0 = 32'hAAAAAAAA;
    tempC_2_1 = 32'hAAAAAAAA;
    tempC_2_2 = 32'hAAAAAAAA;
    tempC_2_3 = 32'hAAAAAAAA;
    tempC_3_0 = 32'hAAAAAAAA;
    tempC_3_1 = 32'hAAAAAAAA;
    tempC_3_2 = 32'hAAAAAAAA;
    tempC_3_3 = 32'hAAAAAAAA;
    tempS_0_0 = 1'h0;
    tempS_0_1 = 1'h0;
    tempS_0_2 = 1'h0;
    tempS_0_3 = 1'h0;
    tempS_1_0 = 1'h0;
    tempS_1_1 = 1'h0;
    tempS_1_2 = 1'h0;
    tempS_1_3 = 1'h0;
    tempS_2_0 = 1'h0;
    tempS_2_1 = 1'h0;
    tempS_2_2 = 1'h0;
    tempS_2_3 = 1'h0;
    tempS_3_0 = 1'h0;
    tempS_3_1 = 1'h0;
    tempS_3_2 = 1'h0;
    tempS_3_3 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSystolicArray

